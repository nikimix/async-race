(()=>{"use strict";const t=new class{constructor(){this.listeners=new Map,this.add=(t,e)=>{var i;this.listeners.has(t)?null===(i=this.listeners.get(t))||void 0===i||i.push(e):this.listeners.set(t,[e])},this.emit=t=>{var e;this.listeners.has(t)&&(null===(e=this.listeners.get(t))||void 0===e||e.forEach((t=>t())))}}};class e{constructor(t,e,i="beforeend"){this.children=[];const{tagName:n,className:s,content:a,attribute:r,value:o}=e,l=document.createElement(n);s&&(l.className=s),a&&(l.textContent=a),Array.isArray(r)?r.forEach((t=>l.setAttribute(t.name,t.value))):r&&l.setAttribute(r.name,r.value),t&&t.insertAdjacentElement(i,l),o&&l instanceof HTMLInputElement&&(l.value=`${o}`),this.element=l}getElement(){return this.element}destroy(){this.children.forEach((t=>t.destroy())),this.element.remove()}}class i extends e{constructor(i,n){super(i,{tagName:"div",className:"page"}),this.handler=n,this.btnWinners=null,this.btnGarage=null,this.render=()=>{const t=new e(this.element,{tagName:"div",className:"nav"}).getElement();this.btnGarage=new e(t,{tagName:"button",className:"btn-to-garage",content:"Garage"}),this.btnWinners=new e(t,{tagName:"button",className:"btn-to-winners",content:"Winners"}),this.btnGarage.getElement().addEventListener("click",this.onGarageClick),this.btnWinners.getElement().addEventListener("click",this.onWinnersClick)},this.subscribe=()=>{t.add("start-race",this.disableBtnWinners),t.add("race-stopped",this.activeBtnWinners),t.add("start-race",this.disableBtnGarage),t.add("race-stopped",this.activeBtnGarage)},this.disableBtnWinners=()=>{var t;null===(t=this.btnWinners)||void 0===t||t.getElement().setAttribute("disabled","")},this.activeBtnWinners=()=>{var t;null===(t=this.btnWinners)||void 0===t||t.getElement().removeAttribute("disabled")},this.disableBtnGarage=()=>{var t;null===(t=this.btnGarage)||void 0===t||t.getElement().setAttribute("disabled","")},this.activeBtnGarage=()=>{var t;null===(t=this.btnGarage)||void 0===t||t.getElement().removeAttribute("disabled")},this.onGarageClick=()=>{this.handler("garage")},this.onWinnersClick=()=>{this.handler("winners")},this.render(),this.subscribe()}}const n=()=>{const t=new e(document.body,{tagName:"p",className:"error-on-update",content:"Необходимо заполнить все поля!"});setTimeout((()=>t.destroy()),3e3)};class s extends e{constructor(i,n){super(i,{tagName:"div",className:"pagination-container"}),this.handlers=n,this.prevBtn=null,this.nextBtn=null,this.render=()=>{this.children=[this.prevBtn=new e(this.element,{tagName:"button",className:"btn-prev",content:"prev",attribute:{name:"disabled",value:""}}),this.nextBtn=new e(this.element,{tagName:"button",className:"btn-next",content:"next"})],this.prevBtn.getElement().addEventListener("click",this.handlers.onPrevClick),this.nextBtn.getElement().addEventListener("click",this.handlers.onNextClick)},this.subscribe=()=>{t.add("start-race",this.disableNextBtn),t.add("start-race",this.disablePrevBtn),t.add("race-stopped",this.activeNextBtn),t.add("race-stopped",this.activePrevBtn)},this.activePrevBtn=()=>{var t;null===(t=this.prevBtn)||void 0===t||t.getElement().removeAttribute("disabled")},this.disablePrevBtn=()=>{var t;null===(t=this.prevBtn)||void 0===t||t.getElement().setAttribute("disabled","")},this.activeNextBtn=()=>{var t;null===(t=this.nextBtn)||void 0===t||t.getElement().removeAttribute("disabled")},this.disableNextBtn=()=>{var t;null===(t=this.nextBtn)||void 0===t||t.getElement().setAttribute("disabled","")},this.destroy=()=>{var t,e;null===(t=this.prevBtn)||void 0===t||t.getElement().removeEventListener("click",this.handlers.onPrevClick),null===(e=this.nextBtn)||void 0===e||e.getElement().removeEventListener("click",this.handlers.onNextClick),super.destroy()},this.render(),this.subscribe()}}class a extends e{constructor(t,i,n){super(t,{tagName:"div",className:"garage"}),this.props=i,this.handlers=n,this.garageList=null,this.pagination=null,this.totalCars=null,this.render=()=>{this.children=[this.totalCars=new e(this.element,{tagName:"p",className:"total-cars",content:`GARAGE (${this.props.totalCars})`}),new e(this.element,{tagName:"p",className:"page-number",content:`PAGE #${this.props.currentPage}`}),this.garageList=new e(this.element,{tagName:"div",className:"garage-list"}),this.pagination=new s(this.element,{onNextClick:this.handlers.onNextPage,onPrevClick:this.handlers.onPrevPage})],this.setPaginationState()},this.setPaginationState=()=>{var t,e,i,n;const{totalCars:s,currentPage:a}=this.props;7*a<s?null===(e=this.pagination)||void 0===e||e.activeNextBtn():null===(t=this.pagination)||void 0===t||t.disableNextBtn(),1===a?null===(i=this.pagination)||void 0===i||i.disablePrevBtn():null===(n=this.pagination)||void 0===n||n.activePrevBtn()},this.getGarageList=()=>{var t;return null===(t=this.garageList)||void 0===t?void 0:t.getElement()},this.render()}}class r extends e{constructor(i,n){super(i,{tagName:"div",className:"car-control-container"}),this.handlers=n,this.selectBtn=null,this.removeBtn=null,this.render=()=>{var t,i;this.children=[this.selectBtn=new e(this.element,{tagName:"button",className:"btn-select",content:"Select"}),this.removeBtn=new e(this.element,{tagName:"button",className:"btn-remove",content:"Remove"})],null===(t=this.selectBtn)||void 0===t||t.getElement().addEventListener("click",this.handlers.onSelectClick),null===(i=this.removeBtn)||void 0===i||i.getElement().addEventListener("click",this.handlers.onRemoveClick)},this.subscribe=()=>{t.add("start-race",this.disableSelectBtn),t.add("start-race",this.disableRemoveBtn),t.add("race-stopped",this.activeRemoveBtn),t.add("race-stopped",this.activeSelectBtn)},this.disableSelectBtn=()=>{var t;null===(t=this.selectBtn)||void 0===t||t.getElement().setAttribute("disabled","")},this.disableRemoveBtn=()=>{var t;null===(t=this.removeBtn)||void 0===t||t.getElement().setAttribute("disabled","")},this.activeSelectBtn=()=>{var t;null===(t=this.selectBtn)||void 0===t||t.getElement().removeAttribute("disabled")},this.activeRemoveBtn=()=>{var t;null===(t=this.removeBtn)||void 0===t||t.getElement().removeAttribute("disabled")},this.destroy=()=>{var t,e;null===(t=this.selectBtn)||void 0===t||t.getElement().removeEventListener("click",this.handlers.onSelectClick),null===(e=this.removeBtn)||void 0===e||e.getElement().removeEventListener("click",this.handlers.onRemoveClick),super.destroy()},this.render(),this.subscribe()}}class o extends e{constructor(t,e){super(t,{tagName:"div",className:"car-icon"}),this.props=e,this.update=t=>{this.icon.style.fill=t},this.element.style.display="flex",this.icon=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.icon.setAttribute("viewBox","0 0 1290 545"),this.icon.setAttribute("preserveAspectRatio","xMinYMax"),this.icon.style.fill=e.color,this.icon.style.width=`${e.width}`;const i=document.createElementNS("http://www.w3.org/2000/svg","use");i.setAttribute("href","../../../assets/img/car.svg#car"),this.icon.append(i),this.element.append(this.icon)}}class l extends e{constructor(t,i){super(t,{tagName:"div",className:"car-control-container"}),this.handlers=i,this.startBtn=null,this.stopBtn=null,this.render=()=>{this.children=[this.startBtn=new e(this.element,{tagName:"button",className:"btn-start-car",content:"Start"}),this.stopBtn=new e(this.element,{tagName:"button",className:"btn-stop-car",content:"Stop",attribute:{name:"disabled",value:""}})],this.startBtn.getElement().addEventListener("click",this.handlers.onStartClick),this.stopBtn.getElement().addEventListener("click",this.handlers.onStopClick)},this.disableStartBtn=()=>{var t;null===(t=this.startBtn)||void 0===t||t.getElement().setAttribute("disabled","")},this.disableStopBtn=()=>{var t;null===(t=this.stopBtn)||void 0===t||t.getElement().setAttribute("disabled","")},this.activeStopBtn=()=>{var t;null===(t=this.stopBtn)||void 0===t||t.getElement().removeAttribute("disabled")},this.activeStartBtn=()=>{var t;null===(t=this.startBtn)||void 0===t||t.getElement().removeAttribute("disabled")},this.destroy=()=>{var t,e;null===(t=this.startBtn)||void 0===t||t.getElement().removeEventListener("click",this.handlers.onStartClick),null===(e=this.stopBtn)||void 0===e||e.getElement().removeEventListener("click",this.handlers.onStopClick),super.destroy()},this.render()}}class h extends e{constructor(t,i,n){super(t,{tagName:"div",className:"car"}),this.props=i,this.handlers=n,this.engineControl=null,this.carIcon=null,this.animationId=null,this.carName=null,this.render=()=>{this.children=[this.carName=new e(this.element,{tagName:"p",className:"car-name",content:`${this.props.name}`}),new r(this.element,{onSelectClick:this.handlers.onSelectClick,onRemoveClick:this.handlers.onRemoveClick}),this.engineControl=new l(this.element,{onStartClick:this.handlers.onStartClick,onStopClick:this.handlers.onStopClick}),this.carIcon=new o(this.element,{width:100,color:`${this.props.color}`}),new e(this.element,{tagName:"div",className:"road"})]},this.start=t=>{var e,i;const{endPoint:n,oneOffset:s,car:a}=this.calculateAnimationData(t);let r=a.offsetLeft;null===(e=this.engineControl)||void 0===e||e.disableStartBtn(),null===(i=this.engineControl)||void 0===i||i.activeStopBtn();const o=()=>{var e;if(r+=s,a.style.transform=`translateX(${r}px)`,r<n)this.animationId=requestAnimationFrame(o);else{const i=null===(e=this.carName)||void 0===e?void 0:e.getElement().textContent;if(!i)throw new Error;this.handlers.onFinishCar(t,i)}};o()},this.break=()=>{this.animationId&&cancelAnimationFrame(this.animationId)},this.stop=()=>{var t,e,i;const n=null===(t=this.carIcon)||void 0===t?void 0:t.getElement();null===(e=this.engineControl)||void 0===e||e.activeStartBtn(),null===(i=this.engineControl)||void 0===i||i.disableStopBtn(),n&&this.animationId&&(cancelAnimationFrame(this.animationId),n.style.transform="translateX(0%)")},this.calculateAnimationData=t=>{var e;const i=null===(e=this.carIcon)||void 0===e?void 0:e.getElement();if(i){const e=i.offsetWidth-100;return{endPoint:e,oneOffset:(e-i.offsetLeft)/(t/1e3*144),car:i}}throw new Error},this.update=(t,e)=>{var i,n;const s=null===(i=this.carName)||void 0===i?void 0:i.getElement();s&&(s.textContent=t),null===(n=this.carIcon)||void 0===n||n.update(e)},this.render()}}var d=function(t,e,i,n){return new(i||(i=Promise))((function(s,a){function r(t){try{l(n.next(t))}catch(t){a(t)}}function o(t){try{l(n.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}l((n=n.apply(t,e||[])).next())}))};class c{constructor(e,i,n){this.parrentNode=e,this.props=i,this.model=n,this.car=null,this.render=()=>{this.car=new h(this.parrentNode,this.props,{onSelectClick:this.onSelectCar,onFinishCar:this.onFinishCar,onRemoveClick:this.onRemoveCar,onStartClick:this.onStartCar,onStopClick:this.onStopCar})},this.onStartCar=()=>{this.startCar()},this.onStopCar=()=>d(this,void 0,void 0,(function*(){this.stopCar()})),this.startCar=t=>d(this,void 0,void 0,(function*(){var e,i,n;if(t)null===(i=this.car)||void 0===i||i.start(t);else{const t=yield this.model.getTimeForCar(this.id);null===(e=this.car)||void 0===e||e.start(t)}(yield this.model.getStatusEngine(this.id))||null===(n=this.car)||void 0===n||n.break()})),this.stopCar=()=>d(this,void 0,void 0,(function*(){var t;const e=yield this.model.getStopStatus(this.id);return e&&(null===(t=this.car)||void 0===t||t.stop()),e})),this.onRemoveCar=()=>{this.model.removeCar(this.id)},this.onSelectCar=()=>{this.model.setSelectedCar(this.id)},this.update=(t,e)=>{if(!this.car)throw new Error;this.car.update(t,e)},this.onFinishCar=(t,e)=>{if(this.model.isRace){const i=+(t/1e3).toFixed(2);this.model.createWinner({id:this.id,carName:e,time:i})}},this.destroy=()=>{var t;null===(t=this.car)||void 0===t||t.destroy()},this.subscribe=()=>{t.add("stop-race",this.onStopCar)},this.id=i.id,this.render()}}var u=function(t,e,i,n){return new(i||(i=Promise))((function(s,a){function r(t){try{l(n.next(t))}catch(t){a(t)}}function o(t){try{l(n.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}l((n=n.apply(t,e||[])).next())}))};class m{constructor(i,n){this.parrentNode=i,this.model=n,this.garage=null,this.cars=new Map,this.currentPage=0,this.subscribe=()=>{t.add("start-race",this.startRace),t.add("stop-race",this.stopRace),t.add("generate-cars",this.render),t.add("remove-car",this.render),t.add("create-car",this.createCar),t.add("update-car",this.updateCar),t.add("create-winner",this.showWinner)},this.render=()=>u(this,void 0,void 0,(function*(){const t=yield this.model.getGarageData();this.currentPage=t.currentPage,this.destroy(),this.garage=new a(this.parrentNode,{currentPage:t.currentPage,totalCars:t.totalCars},{onNextPage:this.onNextPage,onPrevPage:this.onPrevPage}),this.renderCars(t.carsData)})),this.update=()=>{this.render()},this.renderCars=t=>{var e;const i=null===(e=this.garage)||void 0===e?void 0:e.getGarageList();if(!i)throw new Error;t.forEach((t=>this.cars.set(t.id,new c(i,t,this.model))))},this.createCar=()=>{this.render()},this.onNextPage=()=>{this.model.setCurrentGaragePage(this.currentPage+1),this.render()},this.onPrevPage=()=>{this.model.setCurrentGaragePage(this.currentPage-1),this.render()},this.startRace=()=>u(this,void 0,void 0,(function*(){const e=yield this.model.getTimeForRace();t.emit("race-starting");let i=0;this.cars.forEach((t=>{t.startCar(e[i]),i+=1}))})),this.stopRace=()=>u(this,void 0,void 0,(function*(){Promise.all(Array.from(this.cars.values()).map((t=>t.stopCar()))).then((()=>t.emit("race-stopped")))})),this.showWinner=()=>{(t=>{const i=new e(document.body,{tagName:"p",className:"message-on-victory",content:`Победил ${t}`});setTimeout((()=>i.destroy()),4e3)})(this.model.getWinnerName())},this.updateCar=()=>{var t;const e=this.model.getUpdatedCar();null===(t=this.cars.get(e.id))||void 0===t||t.update(e.name,e.color)},this.destroy=()=>{var t;this.cars.forEach((t=>t.destroy())),this.cars.clear(),null===(t=this.garage)||void 0===t||t.destroy()},this.render(),this.subscribe()}}const g=["Audi","BMW","Ford","Honda","Hyundai","Kia","Lada (ВАЗ)","Mazda","Mercedes-Benz","Mitsubishi","Nissan","Renault","Skoda","Toyota","Volkswagen","Buick","Cadillac","Chevrolet","Chrysler","Dodge","Ford","GMC","Hummer","Jeep","Lincoln","Mercury","Oldsmobile","Pontiac","Tesla"],v=["S1","S2","SQ4","TTS","TT RS","Q7","R8","EQE","S","X","Y","1","2","3","4","5","X1","X2","X3","X4","X5","X6"],p=["#E32636","#AB274F","#CD9575","#9966CC","#ED3CCA","#44944A","#A8E4A0","#CCCCFF","#003153","#30D5C8","#F34723","#FFFF00","#1E90FF","#008000","#321414","#4169E1"];function C(t,e){const i=Math.ceil(t<e?t:e),n=Math.floor(e>t?e:t);return Math.floor(Math.random()*(n-i))+i}class b extends e{constructor(i,s){super(i,{tagName:"div",className:"car-updater"}),this.handlers=s,this.updateBtn=null,this.inputCarName=null,this.inputCarColor=null,this.state={name:"",color:"#000"},this.render=()=>{this.children=[this.inputCarName=new e(this.element,{tagName:"input",className:"input-car-name input",attribute:{name:"type",value:"text"},value:`${this.state.name}`}),this.inputCarColor=new e(this.element,{tagName:"input",className:"input-car-color input",attribute:{name:"type",value:"color"},value:`${this.state.color}`}),this.updateBtn=new e(this.element,{tagName:"button",className:"btn-create",content:"Create"})],this.updateBtn.getElement().addEventListener("click",this.onCreateClick),this.inputCarName.getElement().addEventListener("change",this.onChangeName),this.inputCarColor.getElement().addEventListener("change",this.onChangeColor)},this.subscribe=()=>{t.add("create-car",this.update),t.add("start-race",this.disableBuilder),t.add("race-stopped",this.activeBuilder)},this.activeBuilder=()=>{this.children.forEach((t=>t.getElement().removeAttribute("disabled")))},this.disableBuilder=()=>{this.children.forEach((t=>t.getElement().setAttribute("disabled","")))},this.onChangeColor=t=>{const{target:e}=t;e instanceof HTMLInputElement&&(this.state.color=e.value,this.updateLocalState())},this.onChangeName=t=>{const{target:e}=t;e instanceof HTMLInputElement&&(this.state.name=e.value,this.updateLocalState())},this.onCreateClick=()=>{this.state.name?this.handlers.onCreateClick(this.state):n()},this.setLocalState=()=>{const t=localStorage.getItem("builder-state");t&&(this.state=JSON.parse(t))},this.updateLocalState=()=>{localStorage.setItem("builder-state",JSON.stringify(this.state))},this.update=()=>{localStorage.removeItem("builder-state"),this.state={name:"",color:"#000"},this.children.forEach((t=>t.destroy())),this.render()},this.destroy=()=>{var t,e,i;null===(t=this.updateBtn)||void 0===t||t.getElement().removeEventListener("click",this.onCreateClick),null===(e=this.inputCarName)||void 0===e||e.getElement().removeEventListener("change",this.onChangeName),null===(i=this.inputCarColor)||void 0===i||i.getElement().removeEventListener("change",this.onChangeColor),super.destroy()},this.setLocalState(),this.render(),this.subscribe()}}class w extends e{constructor(i,s){super(i,{tagName:"div",className:"car-updater"}),this.handlers=s,this.updateBtn=null,this.inputCarName=null,this.inputCarColor=null,this.state={name:"",color:"#000"},this.render=()=>{this.children=[this.inputCarName=new e(this.element,{tagName:"input",className:"input-car-name input",attribute:[{name:"type",value:"text"},{name:"disabled",value:""}],value:`${this.state.name}`}),this.inputCarColor=new e(this.element,{tagName:"input",className:"input-car-color input",attribute:[{name:"type",value:"color"},{name:"disabled",value:""}],value:`${this.state.color}`}),this.updateBtn=new e(this.element,{tagName:"button",className:"btn-update",content:"Update",attribute:{name:"disabled",value:""}})],this.updateBtn.getElement().addEventListener("click",this.onUpdateClick),this.inputCarName.getElement().addEventListener("change",this.onChangeName),this.inputCarColor.getElement().addEventListener("change",this.onChangeColor)},this.subscribe=()=>{t.add("update-car",this.update),t.add("select-car",this.activeUpdater)},this.onChangeColor=t=>{const{target:e}=t;e instanceof HTMLInputElement&&(this.state.color=e.value,this.updateLocalState())},this.onChangeName=t=>{const{target:e}=t;e instanceof HTMLInputElement&&(this.state.name=e.value,this.updateLocalState())},this.onUpdateClick=()=>{this.state.name?this.handlers.onUpdateClick(this.state):n()},this.activeUpdater=()=>{this.children.forEach((t=>t.getElement().removeAttribute("disabled")))},this.setLocalState=()=>{const t=localStorage.getItem("updater-state");t&&(this.state=JSON.parse(t))},this.updateLocalState=()=>{localStorage.setItem("updater-state",JSON.stringify(this.state))},this.update=()=>{localStorage.removeItem("updater-state"),this.state={name:"",color:"#000"},this.children.forEach((t=>t.destroy())),this.render()},this.destroy=()=>{var t,e,i;null===(t=this.updateBtn)||void 0===t||t.getElement().removeEventListener("click",this.onUpdateClick),null===(e=this.inputCarName)||void 0===e||e.getElement().removeEventListener("change",this.onChangeName),null===(i=this.inputCarColor)||void 0===i||i.getElement().removeEventListener("change",this.onChangeColor),super.destroy()},this.setLocalState(),this.render(),this.subscribe()}}class f extends e{constructor(i,n){super(i,{tagName:"div",className:"race-control"}),this.handlers=n,this.startBtn=null,this.stopBtn=null,this.render=()=>{this.children=[this.startBtn=new e(this.element,{tagName:"button",className:"btn-start-race",content:"Start race"}),this.stopBtn=new e(this.element,{tagName:"button",className:"btn-stop-race",content:"Stop race",attribute:{name:"disabled",value:""}})],this.startBtn.getElement().addEventListener("click",this.handlers.onStartClick),this.stopBtn.getElement().addEventListener("click",this.handlers.onStopClick)},this.activeStartBtn=()=>{var t;null===(t=this.startBtn)||void 0===t||t.getElement().removeAttribute("disabled")},this.disableStartBtn=()=>{var t;null===(t=this.startBtn)||void 0===t||t.getElement().setAttribute("disabled","")},this.activeStopBtn=()=>{var t;null===(t=this.stopBtn)||void 0===t||t.getElement().removeAttribute("disabled")},this.disableStopBtn=()=>{var t;null===(t=this.stopBtn)||void 0===t||t.getElement().setAttribute("disabled","")},this.subscribe=()=>{t.add("start-race",this.disableStartBtn),t.add("race-starting",this.activeStopBtn),t.add("race-stopped",this.activeStartBtn),t.add("race-stopped",this.disableStopBtn)},this.destroy=()=>{var t,e;null===(t=this.startBtn)||void 0===t||t.getElement().removeEventListener("click",this.handlers.onStartClick),null===(e=this.stopBtn)||void 0===e||e.getElement().removeEventListener("click",this.handlers.onStopClick),super.destroy()},this.render(),this.subscribe()}}class N extends e{constructor(i,n){super(i,{tagName:"div",className:"garage-control"}),this.handlers=n,this.btnGenerateCars=null,this.render=()=>{this.children=[new b(this.element,{onCreateClick:this.handlers.onCreateClick}),new w(this.element,{onUpdateClick:this.handlers.onUpdateClick}),new f(this.element,{onStartClick:this.handlers.onStartClick,onStopClick:this.handlers.onStopClick}),this.btnGenerateCars=new e(this.element,{tagName:"button",className:"btn-generate-cars",content:"Generate cars"})],this.btnGenerateCars.getElement().addEventListener("click",this.handlers.onGenerateClick)},this.subscribe=()=>{t.add("start-race",this.disableBtnGenerata),t.add("race-stopped",this.activeBtnGenerata)},this.disableBtnGenerata=()=>{var t;null===(t=this.btnGenerateCars)||void 0===t||t.getElement().setAttribute("disabled","")},this.activeBtnGenerata=()=>{var t;null===(t=this.btnGenerateCars)||void 0===t||t.getElement().removeAttribute("disabled")},this.destroy=()=>{var t;null===(t=this.btnGenerateCars)||void 0===t||t.getElement().removeEventListener("click",this.handlers.onGenerateClick),super.destroy()},this.render(),this.subscribe()}}class E{constructor(t,e){this.parrentNode=t,this.model=e,this.garageControl=null,this.render=()=>{this.garageControl=new N(this.parrentNode,{onCreateClick:this.onCreateCar,onGenerateClick:this.onGenerateCars,onStartClick:this.onStartRace,onStopClick:this.onStopRace,onUpdateClick:this.onUpdateCar})},this.update=()=>{this.render()},this.onCreateCar=t=>{this.model.createCar(t)},this.onUpdateCar=t=>{this.model.updateCar(t)},this.onStartRace=()=>{this.model.switchRaceFlag()},this.onStopRace=()=>{this.model.switchRaceFlag()},this.onGenerateCars=()=>{const t=(()=>{const t=[];for(let e=0;e<100;e+=1){const e=`${g[C(0,g.length)]} ${v[C(0,v.length)]}`,i=p[C(0,p.length)];t.push({name:e,color:i})}return t})();this.model.generateCars(t)},this.destroy=()=>{var t;null===(t=this.garageControl)||void 0===t||t.destroy()},this.render()}}class y{constructor(t,e){this.parrentNode=t,this.model=e,this.garageControl=null,this.garage=null,this.render=()=>{this.garageControl=new E(this.parrentNode,this.model),this.garage=new m(this.parrentNode,this.model)},this.update=()=>{var t,e;null===(t=this.garageControl)||void 0===t||t.update(),null===(e=this.garage)||void 0===e||e.update()},this.destroy=()=>{var t,e;null===(t=null==this?void 0:this.garageControl)||void 0===t||t.destroy(),null===(e=null==this?void 0:this.garage)||void 0===e||e.destroy()},this.render()}}class S extends e{constructor(t,i,n){super(t,{tagName:"div",className:"winners"}),this.props=i,this.handlers=n,this.pagination=null,this.winnersTable=null,this.render=()=>{this.children=[new e(this.element,{tagName:"p",className:"total-winners",content:`WINNERS (${this.props.totalWinners})`}),new e(this.element,{tagName:"p",className:"page-number page-number--winners",content:`PAGE #${this.props.currentPage}`}),this.winnersTable=new e(this.element,{tagName:"table",className:"wiiners-table"}),this.pagination=new s(this.element,{onNextClick:this.handlers.onNextPage,onPrevClick:this.handlers.onPrevPage})],this.addTableContent(),this.setPaginationState()},this.setPaginationState=()=>{var t,e,i,n;const{totalWinners:s,currentPage:a}=this.props;7*a<s?null===(e=this.pagination)||void 0===e||e.activeNextBtn():null===(t=this.pagination)||void 0===t||t.disableNextBtn(),1===a?null===(i=this.pagination)||void 0===i||i.disablePrevBtn():null===(n=this.pagination)||void 0===n||n.activePrevBtn()},this.addTableContent=()=>{var t;const e=null===(t=this.winnersTable)||void 0===t?void 0:t.getElement();e&&(this.addTableHeader(e),this.addWinners(e,this.props.tableData))},this.addTableHeader=t=>{const i=new e(t,{tagName:"tr",className:"table-title"}).getElement();new e(i,{tagName:"th",content:"Number"}),new e(i,{tagName:"th",content:"Car"}),new e(i,{tagName:"th",content:"Name"});const n=new e(i,{tagName:"th"}).getElement(),s=new e(i,{tagName:"th"}).getElement(),a=new e(n,{tagName:"button",className:`btn-sort-wins btn-sort-wins--${this.props.flagWinsOrder.toLowerCase()}`,content:"Wins"}).getElement(),r=new e(s,{tagName:"button",className:`btn-sort-time btn-sort-time--${this.props.flagTimeOrder.toLowerCase()}`,content:"Best time"}).getElement();this.setTableHandlers(a,r)},this.setTableHandlers=(t,e)=>{t.addEventListener("click",this.handlers.onSortByWins),e.addEventListener("click",this.handlers.onSortByTime)},this.render()}addWinners(t,i){i.forEach(((i,n)=>{const s=new e(t,{tagName:"tr"}).getElement();new e(s,{tagName:"td",content:`${n+1}`});const a=new e(s,{tagName:"td"}).getElement();new o(a,{width:60,color:i.color}),new e(s,{tagName:"td",content:`${i.name}`}),new e(s,{tagName:"td",content:`${i.wins}`}),new e(s,{tagName:"td",content:`${i.time}`})}))}}var B=function(t,e,i,n){return new(i||(i=Promise))((function(s,a){function r(t){try{l(n.next(t))}catch(t){a(t)}}function o(t){try{l(n.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}l((n=n.apply(t,e||[])).next())}))};class P{constructor(t,e){this.parrentNode=t,this.model=e,this.winners=null,this.currentPage=0,this.totalWinners=0,this.flagWinsOrder="ASC",this.flagTimeOrder="ASC",this.render=(t=this.currentPage,e="time",i="ASC")=>B(this,void 0,void 0,(function*(){var n;const s=yield this.model.getWinnersPageData(t,e,i);null===(n=this.winners)||void 0===n||n.destroy(),this.currentPage=s.currentPage,this.totalWinners=s.totalWinners,this.winners=new S(this.parrentNode,{currentPage:s.currentPage,totalWinners:s.totalWinners,tableData:s.winnersTableData,flagTimeOrder:this.flagTimeOrder,flagWinsOrder:this.flagWinsOrder},{onNextPage:this.onNextPage,onPrevPage:this.onPrevPage,onSortByTime:this.onSortByTime,onSortByWins:this.onSortByWins})})),this.update=()=>{this.render()},this.onNextPage=()=>{this.model.setCurrentWinnersPage(this.currentPage+1),this.render()},this.onPrevPage=()=>{this.model.setCurrentWinnersPage(this.currentPage-1),this.render()},this.onSortByWins=()=>B(this,void 0,void 0,(function*(){this.render(this.currentPage,"wins",this.flagWinsOrder),"DESC"===this.flagWinsOrder?this.flagWinsOrder="ASC":this.flagWinsOrder="DESC"})),this.onSortByTime=()=>{this.render(this.currentPage,"time",this.flagTimeOrder),"DESC"===this.flagTimeOrder?this.flagTimeOrder="ASC":this.flagTimeOrder="DESC"},this.destroy=()=>{var t;null===(t=this.winners)||void 0===t||t.destroy()}}}class k{constructor(t,e){this.parrentNode=t,this.model=e,this.currentPage="garage",this.render=()=>{return t=this,e=void 0,s=function*(){this.pageContainer=new i(this.parrentNode,this.goToPage).getElement(),this.garage=new y(this.pageContainer,this.model),this.winners=new P(this.pageContainer,this.model),yield this.winners.render(),this.winners.destroy()},new((n=void 0)||(n=Promise))((function(i,a){function r(t){try{l(s.next(t))}catch(t){a(t)}}function o(t){try{l(s.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,o)}l((s=s.apply(t,e||[])).next())}));var t,e,n,s},this.renderPage=t=>{var e,i,n,s;null===(e=this.winners)||void 0===e||e.destroy(),null===(i=this.garage)||void 0===i||i.destroy(),"garage"===t&&this.pageContainer?(null===(n=this.garage)||void 0===n||n.update(),this.currentPage="garage"):this.pageContainer&&(null===(s=this.winners)||void 0===s||s.update(),this.currentPage="winners")},this.goToPage=t=>{"garage"===t?this.renderPage("garage"):this.renderPage("winners")}}}var W=function(t,e,i,n){return new(i||(i=Promise))((function(s,a){function r(t){try{l(n.next(t))}catch(t){a(t)}}function o(t){try{l(n.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}l((n=n.apply(t,e||[])).next())}))};class T{constructor(){this.baseUrl="http://127.0.0.1:3000",this.getGarageData=t=>W(this,void 0,void 0,(function*(){const e=yield fetch(`${this.baseUrl}/garage/?_page=${t}&_limit=7`,{method:"GET"});if(e.ok)return{carsData:yield e.json(),totalCars:Number(e.headers.get("X-Total-Count"))};throw new Error})),this.getAllCars=()=>W(this,void 0,void 0,(function*(){const t=yield fetch(`${this.baseUrl}/garage`,{method:"GET"});if(t.ok)return yield t.json();throw new Error})),this.getWinnersData=(t,e,i)=>W(this,void 0,void 0,(function*(){const n=yield fetch(`${this.baseUrl}/winners/?_page=${t}&_limit=10&_sort=${e}&_order=${i}`,{method:"GET"});if(n.ok)return{winnersData:yield n.json(),totalWinners:Number(n.headers.get("X-Total-Count"))};throw new Error})),this.getAllWinners=()=>W(this,void 0,void 0,(function*(){const t=yield fetch(`${this.baseUrl}/winners`,{method:"GET"});if(t.ok)return yield t.json();throw new Error})),this.createCar=t=>W(this,void 0,void 0,(function*(){const e=yield fetch(`${this.baseUrl}/garage`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return yield e.json()})),this.deleteCar=t=>W(this,void 0,void 0,(function*(){yield fetch(`${this.baseUrl}/garage/${t}`,{method:"DELETE"})})),this.updateCar=(t,e)=>W(this,void 0,void 0,(function*(){const i=yield fetch(`${this.baseUrl}/garage/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return yield i.json()})),this.switchEngine=(t,e)=>W(this,void 0,void 0,(function*(){const i=yield fetch(`${this.baseUrl}/engine/?id=${t}&status=${e}`,{method:"PATCH"});if(i.ok){const t=yield i.json();return t.distance/t.velocity}throw new Error})),this.switchDriveMode=(t,e)=>W(this,void 0,void 0,(function*(){const i=yield fetch(`${this.baseUrl}/engine/?id=${t}&status=${e}`,{method:"PATCH"});if(i.ok)return i.ok;throw new Error})),this.createWinner=t=>W(this,void 0,void 0,(function*(){const e=yield fetch(`${this.baseUrl}/winners`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(e.ok)return yield e.json();throw new Error})),this.deleteWinner=t=>W(this,void 0,void 0,(function*(){const e=yield fetch(`${this.baseUrl}/winners/${t}`,{method:"DELETE"});return yield e.json()})),this.updateWinner=t=>W(this,void 0,void 0,(function*(){const e=yield fetch(`${this.baseUrl}/winners/${t.id}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({wins:t.wins,time:t.time})});if(e.ok)return yield e.json();throw new Error})),this.getWinner=t=>W(this,void 0,void 0,(function*(){try{const e=yield fetch(`${this.baseUrl}/winners/${t}`,{method:"GET"});if(e.ok)return yield e.json();throw new Error}catch(t){return!1}}))}}var x=function(t,e,i,n){return new(i||(i=Promise))((function(s,a){function r(t){try{l(n.next(t))}catch(t){a(t)}}function o(t){try{l(n.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}l((n=n.apply(t,e||[])).next())}))};class A{constructor(){this.updatedCar=null,this.winnerName="",this.selectedCar=0,this.currentGaragePage=1,this.currentWinnersPage=1,this.hasWinner=!1,this.winnersTableData=null,this.carsData=[],this.isRace=!1,this.getWinnersPageData=(t=this.currentWinnersPage,e="wins",i="ASC")=>x(this,void 0,void 0,(function*(){const n=yield this.api.getWinnersData(t,e,i);return this.winnersTableData=yield this.generateDataForWinnerTable(n.winnersData),{currentPage:this.currentWinnersPage,winnersTableData:this.winnersTableData,totalWinners:n.totalWinners}})),this.getGarageData=()=>x(this,void 0,void 0,(function*(){const t=yield this.api.getGarageData(this.currentGaragePage);return this.carsData=t.carsData,{currentPage:this.currentGaragePage,carsData:t.carsData,totalCars:t.totalCars}})),this.generateDataForWinnerTable=t=>x(this,void 0,void 0,(function*(){const e=yield this.api.getAllCars();return t.reduce(((t,i)=>{const n=e.find((t=>t.id===i.id));if(n){const e={time:i.time,wins:i.wins,name:n.name,color:n.color};t.push(e)}return t}),[])})),this.setSelectedCar=e=>{this.selectedCar=e,t.emit("select-car")},this.removeCar=e=>x(this,void 0,void 0,(function*(){yield this.api.deleteCar(e),this.removeWinner(e),t.emit("remove-car")})),this.removeWinner=t=>x(this,void 0,void 0,(function*(){(yield this.api.getAllWinners()).find((e=>e.id===t))&&(yield this.api.deleteWinner(t))})),this.createCar=e=>x(this,void 0,void 0,(function*(){const i=yield this.api.createCar(e);this.carsData.push(i),t.emit("create-car")})),this.updateCar=e=>x(this,void 0,void 0,(function*(){this.selectedCar&&(this.updatedCar=yield this.api.updateCar(this.selectedCar,e),t.emit("update-car"))})),this.getUpdatedCar=()=>{if(this.updatedCar)return this.updatedCar;throw new Error},this.getTimeForCar=t=>x(this,void 0,void 0,(function*(){return yield this.api.switchEngine(t,"started")})),this.getTimeForRace=()=>x(this,void 0,void 0,(function*(){return yield Promise.all(this.carsData.map((t=>this.getTimeForCar(t.id))))})),this.getStatusEngine=t=>x(this,void 0,void 0,(function*(){return yield this.api.switchDriveMode(t,"drive")})),this.getStopStatus=t=>x(this,void 0,void 0,(function*(){return yield this.api.switchEngine(t,"stopped")})),this.createWinner=e=>x(this,void 0,void 0,(function*(){if(this.hasWinner)return;this.hasWinner=!0,this.winnerName=e.carName;const i=(yield this.api.getAllWinners()).find((t=>t.id===e.id));i?i.time>e.time?this.updateWinner({id:e.id,time:e.time,wins:i.wins+1}):this.updateWinner({id:e.id,time:i.time,wins:i.wins+1}):yield this.api.createWinner({id:e.id,time:e.time,wins:1}),t.emit("create-winner")})),this.updateWinner=e=>x(this,void 0,void 0,(function*(){yield this.api.updateWinner(e),t.emit("update-winner")})),this.getWinnerName=()=>this.winnerName,this.setCurrentGaragePage=t=>{this.currentGaragePage=t},this.setCurrentWinnersPage=t=>{this.currentWinnersPage=t},this.switchRaceFlag=()=>{this.isRace=!this.isRace,this.isRace?(this.hasWinner=!1,t.emit("start-race")):t.emit("stop-race")},this.generateCars=e=>x(this,void 0,void 0,(function*(){Promise.all(e.map((t=>this.api.createCar(t)))).then((()=>t.emit("generate-cars")))})),this.api=new T}}new class{constructor(t){this.root=t,this.init=()=>{const t=new A;new k(this.root,t).render()}}}(document.body).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,